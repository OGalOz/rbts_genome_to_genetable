import json
import logging
import pandas as pd


"""
Gene table looks like

            locusId (str):sysName (str):type (int):scaffoldId (str):begin (int):end (int):
                strand (str +/-):name (str):desc (str):GC (float [0,1]):nTA (int)
"""

def obj_data_to_gene_table(obj_data_fp, cdss_method=True):
    """
    Args:
        obj_data_fp: Path to JSON data generated by KBase
        which contains all the info needed to generate 
        a genes table
    Returns:
        gene_table_df (Pandas DataFrame): A pandas dataframe of all the genes info.
                                        Has the following columns:
            locusId (str):sysName (str):type (int):scaffoldId (str):begin (int):end (int):
                strand (str +/-):name (str):desc (str):GC (float [0,1]):nTA (int)
                AA_seq (str)
    """

    # We load the JSON object
    full_object_dict = json.loads(open(obj_data_fp).read())
    if not isinstance(full_object_dict, dict) or not "data" in full_object_dict:
        raise Exception("Program expects Genome JSON object dict to be dict with key 'data'.")
    
    data_list = full_object_dict['data']
    if len(data_list) > 1:
        logging.warning("Expecting data list to have length 1, instead length: " str(len(data_list)))
    data_object = data_list[0]
    data_level_3 = data_object['data']

    if cdss_method:
        cdss_list = data_level_3['cdss']
        gene_table_list = []
        for CDS_info in cdss_list:
            gene_table_list.append(parse_CDS_info(CDS_info))

        # Converting gene_table_list into pandas dataframe
        gene_table_d = {x:[] for x in gene_table_list[0].keys()}
        for gt_d in gene_table_list:
            for k in gene_table_d.keys():
                gene_table_d[k].append(gt_d[k])
   
    # Note this dataframe also contains amino acid sequence of gene
    else:
        raise Exception("No other methods known")

    gene_table_df = pd.DataFrame.from_dict(gene_table_d)

    return gene_table_df





def parse_CDS_info(CDS_info):
    """
    Args:
        CDS_info (python d):
           'aliases' (list<alias_list (multiple)>):
                alias_list 
                    list<'locus_tag', str> AND/OR 
                    list<'old_locus_tag', str> AND/OR
                    list<'protein_id', str>
            'dna_sequence' (str): The actual DNA sequence
            'functions' (list<str>): First object of list is the function
            'location' (list<scaffold (str), bp (int), strand ("+/-"), length (nt)>)
    Returns:
        gene_table_list_d (dict):
            "locusId":str
            "sysName": ?str
            "type": 1
            "scaffoldId": str
            "begin": int
            "end": int
            "strand": str ("+"/"-")
            "name": str (always "unknown" in this case)
            "desc": str
            "GC": float
            "nTA": int
            "AA_seq": Amino Acid sequence of gene
    """
    gene_table_list_d = {}
    
    #Getting locusId
    aliases_l = CDS_info["aliases"]
    locusId_obj = aliases_l[0]
    if locusId_obj[0] != "locus_tag":
        raise Exception("Expecting locus_tag from genome object, instead got " + \
                        locusId_obj[0])
    else:
        gene_table_list_d["locusId"] = locusId_obj[1]
        gene_table_list_d["sysName"] =  locusId_obj[1]
    
    # Getting scaffold, location, strand
    scaffold, bp_loc, strand, nt_len  = CDS_info["location"]
    gene_table_list_d["scaffoldId"] = scaffold
    gene_table_list_d["begin"] = bp_loc
    gene_table_list_d["end"] = bp_loc + nt_len
    gene_table_list_d["strand"] = strand

    # Getting description 
    gene_table_list_d["desc"] = CDS_info["functions"][0] 


    # Getting GC and nTA
    DNA_seq = CDS_info["dna_sequence"].upper() 
    gene_table_list_d["GC"] = (DNA_seq.count("G") + DNA_seq.count("C"))/float(len(DNA_seq))
    gene_table_list_d["nTA"] = DNA_seq.count("TA")

    
    # Undecidable parts (from the data object)
    gene_table_list_d["type"] = 1
    gene_table_list_d["name"] = "unknown"

    # Adding protein sequence
    gene_table_list_d["AA_seq"] = CDS_info["protein_translation"].upper()

    return gene_table_list_d



        

